# Programming for Performance - Assignment 1

## Introduction

Assignment report can be found in the `report.pdf` file.

The submission is a CMake project with C++ source and header files in the `src` subdirectory.
When the project is built, the following binaries are produced:

Programs required in the assignment
- `vbyteenc`: VByte encoder
- `vbytedec`: VByte decoder
- `vbyteencsorted`: VByte encoder, differential compression variant (sorting the input and storing differences)
- `proximityintersection`: Proximity intersection implementation

Extra programs (alternative implementations, utilities for my own usage)
- `vbinfo`: Prints information about a compressed `.vb` file
- `vbytedump`: Dumps compressed `.vb` file to stdout, one entry per line
- `vbyteenc-ifstream`: Implementation of `vbyteenc` using STL `ifstream` and `ofstream` types
- `vbyteenc-ostreambufiterator` Implementation of `vbyteenc` using STL `ofstream` for writing the output file
  instead of my custom `io::file` class

All programs print usage instructions if called without arguments. VByte encoder and decoder programs output the
compressed/decompressed file to the same directory as the given input file. The `proximityintersection` program expects
the `F*` input files to reside in the `files/` subdirectory.

## Requirements

- Linux or macOS, Windows is not supported
- CMake 3.16.4 or newer
- GCC 10.2.0 (or newer, presumably)

## Build and run instructions on `turso.cs.helsinki.fi`

1. Place the input files (e.g. `F*` files) into the `files/` subirectory.
2. Load CMake and GCC 10.2.0 modules:
   ```
   $ module load CMake
   $ module load GCC/10.2.0
   ```
3. Check that the correct versions are now available:
   ```
   $ cmake --version
   $ g++ --version
   ```
4. Create a directory for an out-of-source build in release mode (test and benchmarks scripts assume this directory name):
   ```
   $ mkdir cmake-build-release
   ```
5. Move to the created directory and generate build files:
   ```
   $ cd cmake-build-release
   $ cmake -DCMAKE_BUILD_TYPE=Release ..
   ```
6. Build the project
   ```
   $ cmake --build .
   ```
7. Move back to the project root
   ```
   $ cd ..
   ```
8. Built binaries should now be in the `cmake-build-release` directory and executable. Run them with
   ```
   $ ./cmake-build-release/vbyteenc
   ```
   substituting `vbyteenc` with any other program name if desired.

## Test and benchmark scripts

There exist benchmark and test scripts, which are written as Bash scripts. You can run them with
```
$ ./test.sh
$ ./benchmark.sh
```

The test script works by comparing generated files' SHA-512 hashes with known hashes stored in `checksums.*.txt`, which
were generated by me, so it is mainly useful for catching regressions.

The benchmark script measures `vbyteenc`, `vbytedec` and `vbyteencsorted` execution times and memory usages with the GNU
`time` program, which should be available on `turso01` but for not necessarily on other nodes for some reason.
The benchmark script iterates through all input files in the `files/` subdirectory and spawns a new decoder/encoder
process for each file sequentially.